{"version":3,"file":"vue-upload-component.min.js","sources":["../src/InputFile.vue","../src/FileUpload.vue"],"sourcesContent":["<template>\r\n  <input\r\n    type=\"file\"\r\n    :name=\"$parent.name\"\r\n    :id=\"$parent.inputId || $parent.name\"\r\n    :accept=\"$parent.accept\"\r\n    @change=\"change\"\r\n    :webkitdirectory=\"$parent.directory && $parent.features.directory\"\r\n    :directory=\"$parent.directory && $parent.features.directory\"\r\n    :multiple=\"$parent.multiple && $parent.features.html5\"\r\n  />\r\n</template>\r\n<script>\r\nexport default {\r\n  methods: {\r\n    change(e) {\r\n      this.$destroy()\r\n      this.$parent.addInputFile(e.target)\r\n    }\r\n  }\r\n}\r\n</script>\r\n","<template>\r\n  <label :class=\"className\">\r\n    <slot></slot>\r\n    <input-file></input-file>\r\n  </label>\r\n</template>\r\n<script>\r\nimport InputFile from './InputFile.vue'\r\n\r\nexport default {\r\n  name: 'file-upload',\r\n\r\n  components: {\r\n    InputFile,\r\n  },\r\n\r\n  props: {\r\n    inputId: {\r\n      type: String,\r\n    },\r\n\r\n    name: {\r\n      type: String,\r\n      default: 'file',\r\n    },\r\n\r\n    accept: {\r\n      type: String,\r\n    },\r\n\r\n    multiple: {\r\n      type: Boolean,\r\n    },\r\n\r\n    maximum: {\r\n      type: Number,\r\n      default() {\r\n        return this.multiple ? 0 : 1\r\n      }\r\n    },\r\n\r\n    addIndex: {\r\n      type: [Boolean, Number],\r\n    },\r\n\r\n    directory: {\r\n      type: Boolean,\r\n    },\r\n\r\n    postAction: {\r\n      type: String,\r\n    },\r\n\r\n    headers: {\r\n      type: Object,\r\n      default: Object,\r\n    },\r\n\r\n    data: {\r\n      type: Object,\r\n      default: Object,\r\n    },\r\n\r\n    timeout: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n\r\n\r\n    drop: {\r\n      default: false,\r\n    },\r\n\r\n    dropDirectory: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n\r\n    size: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n\r\n    extensions: {\r\n      default: Array,\r\n    },\r\n\r\n    value: {\r\n      type: Array,\r\n      default: Array,\r\n    },\r\n\r\n    thread: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      files: this.value,\r\n      features: {\r\n        html5: true,\r\n        directory: false,\r\n        drag: false,\r\n      },\r\n\r\n      active: false,\r\n      dropActive: false,\r\n\r\n      uploading: 0,\r\n\r\n      destroy: false,\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    let input = document.createElement('input')\r\n    input.type = 'file'\r\n    input.multiple = true\r\n\r\n    // html5\r\n    if (window.FormData && input.files) {\r\n      if (typeof input.webkitdirectory === 'boolean' || typeof input.directory === 'boolean') {\r\n        this.features.directory = true\r\n      }\r\n\r\n      if (this.features.html5 && typeof input.ondrop !== 'undefined') {\r\n        this.features.drop = true\r\n      }\r\n    } else {\r\n      this.features.html5 = false\r\n    }\r\n\r\n    // files\r\n    this.maps = {}\r\n\r\n    this.$nextTick(function () {\r\n      if (this.$parent) {\r\n        this.$parent.$forceUpdate()\r\n      }\r\n\r\n      this.watchDrop(this.drop)\r\n    })\r\n  },\r\n\r\n  beforeDestroy() {\r\n    this.destroy = true\r\n    this.active = false\r\n  },\r\n\r\n  computed: {\r\n    uploaded() {\r\n      let file\r\n      for (let i = 0; i < this.files.length; i++) {\r\n        file = this.files[i]\r\n        if (file.fileObject && !file.error && !file.success) {\r\n          return false\r\n        }\r\n      }\r\n      return true\r\n    },\r\n\r\n    className() {\r\n      return []\r\n    }\r\n  },\r\n\r\n\r\n  watch: {\r\n    active(active) {\r\n      this.watchActive(active)\r\n    },\r\n\r\n    dropActive() {\r\n      if (this.$parent) {\r\n        this.$parent.$forceUpdate()\r\n      }\r\n    },\r\n\r\n    drop(value) {\r\n      this.watchDrop(value)\r\n    },\r\n\r\n    value(files) {\r\n      if (this.files === files) {\r\n        return\r\n      }\r\n      this.files = files\r\n\r\n      let oldMaps = this.maps\r\n\r\n      // Maps\r\n      this.maps = {}\r\n      for (let i = 0; i < this.files.length; i++) {\r\n        let file = this.files[i]\r\n        this.maps[file.id] = file\r\n      }\r\n\r\n      // add, update\r\n      for (let key in this.maps) {\r\n        let newFile = this.maps[key]\r\n        let oldFile = oldMaps[key]\r\n        if (newFile !== oldFile) {\r\n          this.emitFile(newFile, oldFile)\r\n        }\r\n      }\r\n\r\n      // Delete\r\n      for (let key in oldMaps) {\r\n        if (!this.maps[key]) {\r\n          this.emitFile(undefined, oldMaps[key])\r\n        }\r\n      }\r\n    },\r\n  },\r\n\r\n  methods: {\r\n\r\n    // Clear - Empty the file list\r\n    clear() {\r\n      if (this.files.length) {\r\n        let files = this.files\r\n        this.files = []\r\n\r\n        this.maps = {}\r\n\r\n        this.emitInput()\r\n        for (let i = 0; i < files.length; i++) {\r\n          this.emitFile(undefined, files[i])\r\n        }\r\n      }\r\n      return true\r\n    },\r\n\r\n    // Get - Get file by Id\r\n    get(id) {\r\n      if (!id) {\r\n        return false\r\n      }\r\n\r\n      if (typeof id === 'object') {\r\n        return this.maps[id.id] || false\r\n      }\r\n\r\n      return this.maps[id] || false\r\n    },\r\n\r\n    // Add file - Generate new Id if not provided\r\n    add(_files, index = this.addIndex) {\r\n      let files = _files\r\n      let isArray = files instanceof Array\r\n\r\n      if (!isArray) {\r\n        files = [files]\r\n      }\r\n\r\n      let addFiles = []\r\n      for (let i = 0; i < files.length; i++) {\r\n        let file = files[i]\r\n        if (this.features.html5 && file instanceof Blob) {\r\n          file = {\r\n            file,\r\n            size: file.size,\r\n            name: file.webkitRelativePath || file.relativePath || file.name || 'unknown',\r\n            type: file.type,\r\n          }\r\n        }\r\n        let fileObject = false\r\n        if (file.fileObject === false) {\r\n          // false\r\n        } else if (file.fileObject) {\r\n          fileObject = true\r\n        } else if (typeof Element !== 'undefined' && file.el instanceof Element) {\r\n          fileObject = true\r\n        } else if (typeof Blob !== 'undefined' && file.file instanceof Blob) {\r\n          fileObject = true\r\n        }\r\n        if (fileObject) {\r\n          file = Object.assign({\r\n            fileObject: true,\r\n            size: -1,\r\n            name: 'Filename',\r\n            type: '',\r\n            active: false,\r\n            error: '',\r\n            success: false,\r\n            putAction: this.putAction,\r\n            postAction: this.postAction,\r\n            timeout: this.timeout,\r\n          }, file, {\r\n            response: {},\r\n\r\n            progress: '0.00',\r\n            speed: 0,\r\n          })\r\n\r\n          file.data = Object.assign({}, this.data, file.data ? file.data : {})\r\n\r\n          file.headers = Object.assign({}, this.headers, file.headers ? file.headers : {})\r\n        }\r\n\r\n        if (!file.id) {\r\n          file.id = Math.random().toString(36).substr(2)\r\n        }\r\n\r\n        if (this.emitFilter(file, undefined)) {\r\n          continue\r\n        }\r\n\r\n        if (this.maximum > 1 && (addFiles.length + this.files.length) >= this.maximum) {\r\n          break\r\n        }\r\n\r\n        addFiles.push(file)\r\n\r\n        if (this.maximum === 1) {\r\n          break\r\n        }\r\n      }\r\n\r\n      if (!addFiles.length) {\r\n        return false\r\n      }\r\n\r\n      if (this.maximum === 1) {\r\n        this.clear()\r\n      }\r\n\r\n      let newFiles\r\n      if (index === true || index === 0) {\r\n        newFiles = addFiles.concat(this.files)\r\n      } else if (index) {\r\n        newFiles = addFiles.concat([])\r\n        newFiles.splice(index, 0, addFiles)\r\n      } else {\r\n        newFiles = this.files.concat(addFiles)\r\n      }\r\n\r\n      this.files = newFiles\r\n\r\n      for (let i = 0; i < addFiles.length; i++) {\r\n        let file = addFiles[i]\r\n        this.maps[file.id] = file\r\n      }\r\n\r\n      this.emitInput()\r\n      for (let i = 0; i < addFiles.length; i++) {\r\n        this.emitFile(addFiles[i], undefined)\r\n      }\r\n\r\n      return isArray ? addFiles : addFiles[0]\r\n    },\r\n\r\n    // InputFile - Add the file selected by <input type = \"file\"> to the upload list\r\n    addInputFile(el) {\r\n      let files = []\r\n      if (el.files) {\r\n        for (let i = 0; i < el.files.length; i++) {\r\n          let file = el.files[i]\r\n          files.push({\r\n            size: file.size,\r\n            name: file.webkitRelativePath || file.relativePath || file.name,\r\n            type: file.type,\r\n            file,\r\n            el\r\n          })\r\n        }\r\n      } else {\r\n        files.push({\r\n          name: el.value.replace(/^.*?([^\\/\\\\\\r\\n]+)$/, '$1'),\r\n          el,\r\n        })\r\n      }\r\n      return this.add(files)\r\n    },\r\n\r\n    // DataTransfer - Add files that are dragged or pasted into the upload list\r\n    addDataTransfer(dataTransfer) {\r\n      let files = []\r\n      if (dataTransfer.items && dataTransfer.items.length) {\r\n        let items = []\r\n        for (let i = 0; i < dataTransfer.items.length; i++) {\r\n          let item = dataTransfer.items[i]\r\n          if (item.getAsEntry) {\r\n            item = item.getAsEntry() || item.getAsFile()\r\n          } else if (item.webkitGetAsEntry) {\r\n            item = item.webkitGetAsEntry() || item.getAsFile()\r\n          } else {\r\n            item = item.getAsFile()\r\n          }\r\n          if (item) {\r\n            items.push(item)\r\n          }\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n          let forEach = (i) => {\r\n            let item = items[i]\r\n            if (!item || (this.maximum > 0 && files.length >= this.maximum)) {\r\n              return resolve(this.add(files))\r\n            }\r\n            this.getEntry(item).then(function (results) {\r\n              files.push.apply(files, results)\r\n              forEach(i + 1)\r\n            })\r\n          }\r\n          forEach(0)\r\n        })\r\n      }\r\n\r\n      if (dataTransfer.files.length) {\r\n        for (let i = 0; i < dataTransfer.files.length; i++) {\r\n          files.push(dataTransfer.files[i])\r\n          if (this.maximum > 0 && files.length >= this.maximum) {\r\n            break\r\n          }\r\n        }\r\n        return Promise.resolve(this.add(files))\r\n      }\r\n\r\n      return Promise.resolve([])\r\n    },\r\n\r\n    getEntry(entry, path = '') {\r\n      return new Promise((resolve, reject) => {\r\n        if (entry.isFile) {\r\n          entry.file(function (file) {\r\n            resolve([\r\n              {\r\n                size: file.size,\r\n                name: path + file.name,\r\n                type: file.type,\r\n                file,\r\n              }\r\n            ])\r\n          })\r\n        } else if (entry.isDirectory && this.dropDirectory) {\r\n          let files = []\r\n          let dirReader = entry.createReader()\r\n          let readEntries = () => {\r\n            dirReader.readEntries((entries) => {\r\n              let forEach = (i) => {\r\n                if ((!entries[i] && i === 0) || (this.maximum > 0 && files.length >= this.maximum)) {\r\n                  return resolve(files)\r\n                }\r\n                if (!entries[i]) {\r\n                  return readEntries()\r\n                }\r\n                this.getEntry(entries[i], path + entry.name + '/').then((results) => {\r\n                  files.push.apply(files, results)\r\n                  forEach(i + 1)\r\n                })\r\n              }\r\n              forEach(0)\r\n            })\r\n          }\r\n          readEntries()\r\n        } else {\r\n          resolve([])\r\n        }\r\n      })\r\n    },\r\n\r\n    // Remove a file object\r\n    remove(id) {\r\n      let file = this.get(id)\r\n      if (file) {\r\n        if (this.emitFilter(undefined, file)) {\r\n          return false\r\n        }\r\n        let files = this.files.concat([])\r\n        let index = files.indexOf(file)\r\n        if (index === -1) {\r\n          console.error('remove', file)\r\n          return false\r\n        }\r\n        files.splice(index, 1)\r\n        this.files = files\r\n\r\n        delete this.maps[file.id]\r\n\r\n        this.emitInput()\r\n        this.emitFile(undefined, file)\r\n      }\r\n      return file\r\n    },\r\n\r\n    // Update a file object\r\n    update(id, data) {\r\n      let file = this.get(id)\r\n      if (file) {\r\n        let newFile = Object.assign({}, file, data)\r\n        if (file.fileObject && file.active && !newFile.active && !newFile.error && !newFile.success) {\r\n          newFile.error = 'abort'\r\n        }\r\n\r\n        if (this.emitFilter(newFile, file)) {\r\n          return false\r\n        }\r\n\r\n        let files = this.files.concat([])\r\n        let index = files.indexOf(file)\r\n        if (index === -1) {\r\n          console.error('update', file)\r\n          return false\r\n        }\r\n        files.splice(index, 1, newFile)\r\n        this.files = files\r\n\r\n        delete this.maps[file.id]\r\n        this.maps[newFile.id] = newFile\r\n\r\n        this.emitInput()\r\n        this.emitFile(newFile, file)\r\n        return newFile\r\n      }\r\n      return false\r\n    },\r\n\r\n    emitFilter(newFile, oldFile) {\r\n      let isPrevent = false\r\n      this.$emit('input-filter', newFile, oldFile, function () {\r\n        isPrevent = true\r\n        return isPrevent\r\n      })\r\n      return isPrevent\r\n    },\r\n\r\n    emitFile(newFile, oldFile) {\r\n      this.$emit('input-file', newFile, oldFile)\r\n      if (newFile && newFile.fileObject && newFile.active && (!oldFile || !oldFile.active)) {\r\n        this.uploading++\r\n        this.$nextTick(function () {\r\n          setTimeout(() => {\r\n            this.upload(newFile).then(() => {\r\n              if (newFile && newFile.fileObject) {\r\n                this.update(newFile, {\r\n                  active: false,\r\n                  success: !newFile.error\r\n                })\r\n              }\r\n            }).catch((e) => {\r\n              this.update(newFile, {\r\n                active: false,\r\n                success: false,\r\n                error: e.code || e.error || e.message || e\r\n              })\r\n            })\r\n          }, parseInt(Math.random() * 50 + 50, 10))\r\n        })\r\n      } else if ((!newFile || !newFile.fileObject || !newFile.active) && oldFile && oldFile.fileObject && oldFile.active) {\r\n        this.uploading--\r\n      }\r\n\r\n      if (this.active && (Boolean(newFile) !== Boolean(oldFile) || newFile.active !== oldFile.active)) {\r\n        this.watchActive(true)\r\n      }\r\n    },\r\n\r\n    emitInput() {\r\n      this.$emit('input', this.files)\r\n    },\r\n\r\n\r\n    // Validate then upload file\r\n    upload(id) {\r\n      let file = this.get(id)\r\n\r\n      // Validate file\r\n      if (!file) {\r\n        return Promise.reject('not_exists')\r\n      }\r\n\r\n      // Validate file object data\r\n      if (!file.fileObject) {\r\n        return Promise.reject('file_object')\r\n      }\r\n\r\n      // Reject if there is an error\r\n      if (file.error) {\r\n        return Promise.reject(file.error)\r\n      }\r\n\r\n      // If the file is already downloaded, don't download-it again\r\n      if (file.success) {\r\n        return Promise.resolve(file)\r\n      }\r\n\r\n      // Validate extensions\r\n      let extensions = this.extensions\r\n      if (extensions && (extensions.length || typeof extensions.length === 'undefined')) {\r\n        if (typeof extensions !== 'object' || !(extensions instanceof RegExp)) {\r\n          if (typeof extensions === 'string') {\r\n            extensions = extensions.split(',').map(value => value.trim()).filter(value => value)\r\n          }\r\n          extensions = new RegExp('\\\\.(' + extensions.join('|').replace(/\\./g, '\\\\.') + ')$', 'i')\r\n        }\r\n        if (file.name.search(extensions) === -1) {\r\n          return Promise.reject('extension')\r\n        }\r\n      }\r\n\r\n      // Validate size\r\n      if (this.size > 0 && file.size >= 0 && file.size > this.size) {\r\n        return Promise.reject('size')\r\n      }\r\n\r\n      // Upload with Html5 specs or Html4 if not supported\r\n      if (this.features.html5) {\r\n        return this.uploadHtml5(file)\r\n      }\r\n      return this.uploadHtml4(file)\r\n    },\r\n\r\n    uploadHtml5(file) {\r\n      let form = new window.FormData()\r\n      let value\r\n      for (let key in file.data) {\r\n        value = file.data[key]\r\n        if (value && typeof value === 'object' && typeof value.toString !== 'function') {\r\n          if (value instanceof File) {\r\n            form.append(key, value, value.name)\r\n          } else {\r\n            form.append(key, JSON.stringify(value))\r\n          }\r\n        } else if (value !== null && value !== undefined) {\r\n          form.append(key, value)\r\n        }\r\n      }\r\n      form.append(this.name, file.file, file.file.filename || file.name)\r\n      let xhr = new XMLHttpRequest()\r\n      xhr.open('POST', file.postAction)\r\n      return this.uploadXhr(xhr, file, form)\r\n    },\r\n\r\n    // HTML5 uploadXMLHttpRequest object\r\n    uploadXhr(xhr, _file, body) {\r\n      let file = _file\r\n      let speedTime = 0\r\n      let speedLoaded = 0\r\n\r\n      xhr.upload.onprogress = (e) => {\r\n        file = this.get(file)\r\n        if (!e.lengthComputable || !file || !file.fileObject || !file.active) {\r\n          return\r\n        }\r\n\r\n        let speedTime2 = Math.round(Date.now() / 1000)\r\n        if (speedTime2 === speedTime) {\r\n          return\r\n        }\r\n        speedTime = speedTime2\r\n\r\n        file = this.update(file, {\r\n          progress: (e.loaded / e.total * 100).toFixed(2),\r\n          speed: e.loaded - speedLoaded,\r\n        })\r\n        speedLoaded = e.loaded\r\n      }\r\n\r\n      let interval = setInterval(() => {\r\n        file = this.get(file)\r\n        if (file && file.fileObject && !file.success && !file.error && file.active) {\r\n          return\r\n        }\r\n\r\n        if (interval) {\r\n          clearInterval(interval)\r\n          interval = false\r\n        }\r\n\r\n        try {\r\n          xhr.abort()\r\n          xhr.timeout = 1\r\n        } catch (e) {\r\n        }\r\n      }, 100)\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let complete\r\n        let fn = (e) => {\r\n          if (complete) {\r\n            return\r\n          }\r\n          complete = true\r\n          if (interval) {\r\n            clearInterval(interval)\r\n            interval = false\r\n          }\r\n\r\n          file = this.get(file)\r\n\r\n          if (!file) {\r\n            return reject('not_exists')\r\n          }\r\n\r\n          if (!file.fileObject) {\r\n            return reject('file_object')\r\n          }\r\n\r\n          if (file.error) {\r\n            return reject(file.error)\r\n          }\r\n\r\n          if (!file.active) {\r\n            return reject('abort')\r\n          }\r\n\r\n\r\n          if (file.success) {\r\n            return resolve(file)\r\n          }\r\n\r\n          let data = {}\r\n\r\n          switch (e.type) {\r\n            case 'timeout':\r\n            case 'abort':\r\n              data.error = e.type\r\n              break\r\n            case 'error':\r\n              if (!xhr.status) {\r\n                data.error = 'network'\r\n              } else if (xhr.status >= 500) {\r\n                data.error = 'server'\r\n              } else if (xhr.status >= 400) {\r\n                data.error = 'denied'\r\n              }\r\n              break\r\n            default:\r\n              if (xhr.status >= 500) {\r\n                data.error = 'server'\r\n              } else if (xhr.status >= 400) {\r\n                data.error = 'denied'\r\n              } else {\r\n                data.progress = '100.00'\r\n              }\r\n          }\r\n\r\n          if (xhr.responseText) {\r\n            let contentType = xhr.getResponseHeader('Content-Type')\r\n            if (contentType && contentType.indexOf('/json') !== -1) {\r\n              data.response = JSON.parse(xhr.responseText)\r\n            } else {\r\n              data.response = xhr.responseText\r\n            }\r\n          }\r\n\r\n          file = this.update(file, data)\r\n\r\n          if (file.error) {\r\n            return reject(file.error)\r\n          }\r\n\r\n          return resolve(file)\r\n        }\r\n\r\n        xhr.onload = fn\r\n        xhr.onerror = fn\r\n        xhr.onabort = fn\r\n        xhr.ontimeout = fn\r\n\r\n        if (file.timeout) {\r\n          xhr.timeout = file.timeout\r\n        }\r\n\r\n        // headers\r\n        for (let key in file.headers) {\r\n          xhr.setRequestHeader(key, file.headers[key])\r\n        }\r\n\r\n        file = this.update(file, { xhr })\r\n\r\n        xhr.send(body)\r\n      })\r\n    },\r\n\r\n    uploadHtml4(_file) {\r\n      let file = _file\r\n      let onKeydown = function (e) {\r\n        if (e.keyCode === 27) {\r\n          e.preventDefault()\r\n        }\r\n      }\r\n\r\n      let iframe = document.createElement('iframe')\r\n      iframe.id = 'upload-iframe-' + file.id\r\n      iframe.name = 'upload-iframe-' + file.id\r\n      iframe.src = 'about:blank'\r\n      iframe.setAttribute('style', 'width:1px;height:1px;top:-999em;position:absolute; margin-top:-999em;')\r\n\r\n\r\n      let form = document.createElement('form')\r\n\r\n      form.action = file.postAction\r\n\r\n      form.name = 'upload-form-' + file.id\r\n\r\n\r\n      form.setAttribute('method', 'POST')\r\n      form.setAttribute('target', 'upload-iframe-' + file.id)\r\n      form.setAttribute('enctype', 'multipart/form-data')\r\n\r\n      let value\r\n      let input\r\n      for (let key in file.data) {\r\n        value = file.data[key]\r\n        if (value && typeof value === 'object' && typeof value.toString !== 'function') {\r\n          value = JSON.stringify(value)\r\n        }\r\n        if (value !== null && value !== undefined) {\r\n          input = document.createElement('input')\r\n          input.type = 'hidden'\r\n          input.name = key\r\n          input.value = value\r\n          form.appendChild(input)\r\n        }\r\n      }\r\n      form.appendChild(file.el)\r\n\r\n      document.body.appendChild(iframe).appendChild(form)\r\n\r\n      let getResponseData = function () {\r\n        let doc\r\n        try {\r\n          if (iframe.contentWindow) {\r\n            doc = iframe.contentWindow.document\r\n          }\r\n        } catch (err) {\r\n        }\r\n        if (!doc) {\r\n          try {\r\n            doc = iframe.contentDocument ? iframe.contentDocument : iframe.document\r\n          } catch (err) {\r\n            doc = iframe.document\r\n          }\r\n        }\r\n        if (doc && doc.body) {\r\n          return doc.body.innerHTML\r\n        }\r\n        return null\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          file = this.update(file, { iframe })\r\n\r\n          // Validate file\r\n          if (!file) {\r\n            return reject('not_exists')\r\n          }\r\n\r\n          let interval = setInterval(() => {\r\n            file = this.get(file)\r\n            if (file && file.fileObject && !file.success && !file.error && file.active) {\r\n              return\r\n            }\r\n\r\n            if (interval) {\r\n              clearInterval(interval)\r\n              interval = false\r\n            }\r\n\r\n            iframe.onabort({ type: file ? 'abort' : 'not_exists' })\r\n          }, 100)\r\n\r\n\r\n          let complete\r\n          let fn = (e) => {\r\n            if (complete) {\r\n              return\r\n            }\r\n            complete = true\r\n\r\n\r\n            if (interval) {\r\n              clearInterval(interval)\r\n              interval = false\r\n            }\r\n\r\n            document.body.removeEventListener('keydown', onKeydown)\r\n\r\n            file = this.get(file)\r\n\r\n            if (!file) {\r\n              return reject('not_exists')\r\n            }\r\n\r\n            if (!file.fileObject) {\r\n              return reject('file_object')\r\n            }\r\n\r\n            if (file.error) {\r\n              return reject(file.error)\r\n            }\r\n\r\n            if (!file.active) {\r\n              return reject('abort')\r\n            }\r\n\r\n            if (file.success) {\r\n              return resolve(file)\r\n            }\r\n\r\n            let response = getResponseData()\r\n            let data = {}\r\n            switch (e.type) {\r\n              case 'abort':\r\n                data.error = 'abort'\r\n                break\r\n              case 'error':\r\n                if (file.error) {\r\n                  data.error = file.error\r\n                } else if (response === null) {\r\n                  data.error = 'network'\r\n                } else {\r\n                  data.error = 'denied'\r\n                }\r\n                break\r\n              default:\r\n                if (file.error) {\r\n                  data.error = file.error\r\n                } else if (data === null) {\r\n                  data.error = 'network'\r\n                } else {\r\n                  data.progress = '100.00'\r\n                }\r\n            }\r\n\r\n            if (response !== null) {\r\n              if (response && response.substr(0, 1) === '{' && response.substr(response.length - 1, 1) === '}') {\r\n                try {\r\n                  response = JSON.parse(response)\r\n                } catch (err) {\r\n                }\r\n              }\r\n              data.response = response\r\n            }\r\n\r\n            file = this.update(file, data)\r\n\r\n            if (file.error) {\r\n              return reject(file.error)\r\n            }\r\n\r\n            return resolve(file)\r\n          }\r\n\r\n          iframe.onload = fn\r\n          iframe.onerror = fn\r\n          iframe.onabort = fn\r\n\r\n          document.body.addEventListener('keydown', onKeydown)\r\n\r\n          form.submit()\r\n        }, 50)\r\n      }).then(function (res) {\r\n        iframe.parentNode && iframe.parentNode.removeChild(iframe)\r\n        return res\r\n      }).catch(function (res) {\r\n        iframe.parentNode && iframe.parentNode.removeChild(iframe)\r\n        return res\r\n      })\r\n    },\r\n\r\n    watchActive(active) {\r\n      let file\r\n      let index = 0\r\n      while ((file = this.files[index])) {\r\n        index++\r\n        if (!file.fileObject) {\r\n          // Do nothing\r\n        } else if (active && !this.destroy) {\r\n          if (this.uploading >= this.thread || (this.uploading && !this.features.html5)) {\r\n            break\r\n          }\r\n          if (!file.active && !file.error && !file.success) {\r\n            this.update(file, { active: true })\r\n          }\r\n        } else {\r\n          if (file.active) {\r\n            this.update(file, { active: false })\r\n          }\r\n        }\r\n      }\r\n      if (this.uploading === 0) {\r\n        this.active = false\r\n      }\r\n    },\r\n\r\n    watchDrop(_el) {\r\n      let el = _el\r\n      if (!this.features.drop) {\r\n        return\r\n      }\r\n\r\n      if (this.dropElement) {\r\n        try {\r\n          document.removeEventListener('dragenter', this.onDragenter, false)\r\n          document.removeEventListener('dragleave', this.onDragleave, false)\r\n          document.removeEventListener('drop', this.onDocumentDrop, false)\r\n          this.dropElement.removeEventListener('dragover', this.onDragover, false)\r\n          this.dropElement.removeEventListener('drop', this.onDrop, false)\r\n        } catch (e) {\r\n        }\r\n      }\r\n\r\n      if (!el) {\r\n        el = false\r\n      } else if (typeof el === 'string') {\r\n        el = document.querySelector(el) || this.$root.$el.querySelector(el)\r\n      } else if (el === true) {\r\n        el = this.$parent.$el\r\n      }\r\n\r\n      this.dropElement = el\r\n\r\n      if (this.dropElement) {\r\n        document.addEventListener('dragenter', this.onDragenter, false)\r\n        document.addEventListener('dragleave', this.onDragleave, false)\r\n        document.addEventListener('drop', this.onDocumentDrop, false)\r\n        this.dropElement.addEventListener('dragover', this.onDragover, false)\r\n        this.dropElement.addEventListener('drop', this.onDrop, false)\r\n      }\r\n    },\r\n\r\n    onDragenter(e) {\r\n      e.preventDefault()\r\n      if (!this.dropActive) {\r\n        this.dropActive = true\r\n      }\r\n    },\r\n\r\n    onDragleave(e) {\r\n      e.preventDefault()\r\n      if (e.target.nodeName === 'HTML' || (e.screenX === 0 && e.screenY === 0 && !e.fromElement && e.offsetX <= 0)) {\r\n        this.dropActive = false\r\n      }\r\n    },\r\n\r\n    onDragover(e) {\r\n      e.preventDefault()\r\n    },\r\n\r\n    onDocumentDrop() {\r\n      this.dropActive = false\r\n    },\r\n\r\n    onDrop(e) {\r\n      e.preventDefault()\r\n      this.addDataTransfer(e.dataTransfer)\r\n    },\r\n  }\r\n}\r\n</script>\r\n"],"names":["render","e","$destroy","$parent","addInputFile","target","String","Boolean","Number","this","multiple","Object","Array","value","input","document","createElement","type","window","FormData","files","webkitdirectory","directory","features","html5","ondrop","drop","maps","$nextTick","$forceUpdate","watchDrop","destroy","active","file","i","length","fileObject","error","success","watchActive","oldMaps","id","key","newFile","oldFile","emitFile","undefined","emitInput","_files","index","addIndex","isArray","addFiles","Blob","size","webkitRelativePath","relativePath","name","Element","el","assign","putAction","postAction","timeout","data","headers","Math","random","toString","substr","emitFilter","maximum","push","clear","newFiles","concat","splice","replace","add","dataTransfer","items","item","getAsEntry","getAsFile","webkitGetAsEntry","Promise","resolve","reject","forEach","_this","getEntry","then","results","apply","entry","path","isFile","isDirectory","_this2","dropDirectory","dirReader","createReader","readEntries","entries","get","indexOf","isPrevent","$emit","uploading","upload","update","catch","code","message","parseInt","extensions","RegExp","split","map","trim","filter","join","search","uploadHtml5","uploadHtml4","form","File","append","JSON","stringify","filename","xhr","XMLHttpRequest","open","uploadXhr","_file","body","speedTime","speedLoaded","onprogress","_this4","lengthComputable","speedTime2","round","Date","now","loaded","total","toFixed","interval","setInterval","abort","complete","fn","status","progress","responseText","contentType","getResponseHeader","response","parse","onload","onerror","onabort","ontimeout","setRequestHeader","send","onKeydown","keyCode","preventDefault","iframe","src","setAttribute","action","appendChild","_this5","removeEventListener","doc","contentWindow","err","contentDocument","innerHTML","getResponseData","addEventListener","submit","res","parentNode","removeChild","thread","_el","dropElement","onDragenter","onDragleave","onDocumentDrop","onDragover","onDrop","querySelector","$root","$el","dropActive","nodeName","screenX","screenY","fromElement","offsetX","addDataTransfer"],"mappings":"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"}